"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ —Å Telegram –±–æ—Ç–æ–º.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Set, Optional, Any
import requests
from telegram import Bot
from alert_controller import generate_alerts
from consumption_loader import load_data

logger = logging.getLogger(__name__)

class AlertNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–∞—Ö —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, bot_token: str, api_base_url: str = "http://localhost:5001"):
        self.bot_token = bot_token
        self.api_base_url = api_base_url
        self.bot = Bot(token=bot_token)
        self.subscribed_users: Set[int] = set()
        self.last_alerts: List[Dict[str, Any]] = []
        self.ctp_to_unom_map = None
        self.consumption_df = None
        
    async def initialize_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AlertNotifier...")
            self.ctp_to_unom_map, self.consumption_df = load_data()
            if self.ctp_to_unom_map and self.consumption_df is not None:
                logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.consumption_df)} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def add_subscriber(self, user_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        self.subscribed_users.add(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∞–ª–µ—Ä—Ç—ã")

    def remove_subscriber(self, user_id: int):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        self.subscribed_users.discard(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∞–ª–µ—Ä—Ç–æ–≤")

    def get_subscribers_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return len(self.subscribed_users)

    async def send_alert_to_user(self, user_id: int, alert: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            level_emoji = {
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": "üî¥",
                "–í—ã—Å–æ–∫–∏–π": "üü†", 
                "–°—Ä–µ–¥–Ω–∏–π": "üü°",
                "–ù–∏–∑–∫–∏–π": "üü¢"
            }.get(alert.get('level', ''), '‚ö™')
            
            message = f"üö® **–ù–æ–≤—ã–π –∞–ª–µ—Ä—Ç!**\n\n"
            message += f"{level_emoji} **{alert.get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}**\n"
            message += f"üè† {alert.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {alert.get('object_id', 'N/A')}\n"
            message += f"üìù {alert.get('alert_message', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            message += f"üí° {alert.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n"
            message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            
            await self.bot.send_message(
                chat_id=user_id, 
                text=message, 
                parse_mode='Markdown'
            )
            logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def send_alert_to_all_subscribers(self, alert: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.subscribed_users:
            return
            
        tasks = [self.send_alert_to_user(user_id, alert) for user_id in self.subscribed_users]
        await asyncio.gather(*tasks, return_exceptions=True)

    def _alerts_are_different(self, new_alerts: List[Dict], old_alerts: List[Dict]) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏"""
        if not old_alerts:
            return new_alerts
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        old_keys = set()
        for alert in old_alerts:
            key = f"{alert.get('type', '')}_{alert.get('object_id', '')}_{alert.get('alert_message', '')}"
            old_keys.add(key)
            
        new_alerts_only = []
        for alert in new_alerts:
            key = f"{alert.get('type', '')}_{alert.get('object_id', '')}_{alert.get('alert_message', '')}"
            if key not in old_keys:
                new_alerts_only.append(alert)
                
        return new_alerts_only

    async def check_and_notify_new_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            if not self.ctp_to_unom_map or self.consumption_df is None:
                logger.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–ª–µ—Ä—Ç–æ–≤")
                return
                
            config = {'event_duration_threshold': 4}
            current_alerts = await generate_alerts(
                self.ctp_to_unom_map, 
                self.consumption_df, 
                config=config
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            new_alerts = self._alerts_are_different(current_alerts, self.last_alerts)
            
            if new_alerts:
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_alerts)} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                for alert in new_alerts:
                    await self.send_alert_to_all_subscribers(alert)
                    
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            self.last_alerts = current_alerts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")

    async def get_current_alerts_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Ç–µ–∫—É—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            if not self.ctp_to_unom_map or self.consumption_df is None:
                return {"error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
                
            config = {'event_duration_threshold': 4}
            alerts = await generate_alerts(
                self.ctp_to_unom_map, 
                self.consumption_df, 
                config=config
            )
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
            levels_count = {}
            for alert in alerts:
                level = alert.get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                levels_count[level] = levels_count.get(level, 0) + 1
                
            return {
                "total_alerts": len(alerts),
                "levels_count": levels_count,
                "subscribers_count": len(self.subscribed_users),
                "last_check": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return {"error": str(e)}

    async def start_monitoring(self, check_interval: int = 300):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {check_interval} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                await self.check_and_notify_new_alerts()
                await asyncio.sleep(check_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
alert_notifier: Optional[AlertNotifier] = None

def get_alert_notifier() -> Optional[AlertNotifier]:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AlertNotifier"""
    return alert_notifier

def initialize_alert_notifier(bot_token: str, api_base_url: str = "http://localhost:5001"):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AlertNotifier"""
    global alert_notifier
    alert_notifier = AlertNotifier(bot_token, api_base_url)
    return alert_notifier

async def main():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã AlertNotifier"""
    import os
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = os.path.join(os.path.dirname(__file__), '..', 'configs', 'telegram_config.json')
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        bot_token = config.get('bot_token')
        if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º notifier
        notifier = AlertNotifier(bot_token)
        await notifier.initialize_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
        # notifier.add_subscriber(123456789)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∞–ª–µ—Ä—Ç–æ–≤
        summary = await notifier.get_current_alerts_summary()
        print("–°–≤–æ–¥–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤:", json.dumps(summary, indent=2, ensure_ascii=False))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        # await notifier.start_monitoring(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞
        
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
