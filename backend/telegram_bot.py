import asyncio
import json
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import pandas as pd

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from alert_controller import generate_alerts
from consumption_loader import load_data, get_consumption_for_period_unom, get_consumption_for_period_ctp, load_excedents_data, simulate_real_consumption
from alert_integration import AlertNotifier
from telegram_commands import AdvancedTelegramCommands
from user_auth import auth_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, token: str, api_base_url: str = "http://localhost:5001"):
        self.token = token
        self.api_base_url = api_base_url
        self.application = None
        self.ctp_to_unom_map = None
        self.consumption_df = None
        self.excedents_df = None
        self.subscribed_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.alert_notifier = None
        self.advanced_commands = None
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.authorized_users = {}  # {telegram_id: session_info}
        self.auth_pending = {}  # {telegram_id: {'email': ..., 'expires_at': ...}} - –æ–∂–∏–¥–∞—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
    async def initialize_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—Ç–µ—á–∫–∞–º–∏
            self.ctp_to_unom_map, self.consumption_df, self.excedents_df = load_data()
            if self.ctp_to_unom_map and self.consumption_df is not None:
                logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.consumption_df)} –∑–∞–ø–∏—Å–µ–π")
                if not self.excedents_df.empty:
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ç–µ—á–∫–∞—Ö: {len(self.excedents_df)} –∑–∞–ø–∏—Å–µ–π")
                else:
                    logger.info("–î–∞–Ω–Ω—ã–µ –æ–± —É—Ç–µ—á–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AlertNotifier
            self.alert_notifier = AlertNotifier(self.token, self.api_base_url)
            await self.alert_notifier.initialize_data()
            logger.info("AlertNotifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.advanced_commands = AdvancedTelegramCommands(self)
            logger.info("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
üö∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:
‚Ä¢ üîî –ê–ª–µ—Ä—Ç—ã –ø–æ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—é
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
‚Ä¢ üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—Ö
‚Ä¢ üó∫Ô∏è –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
        """
        
        await update.message.reply_text(welcome_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        user_id = update.effective_user.id
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n\n"
                "üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**\n"
                "/register email@example.com password –ò–º—è –§–∞–º–∏–ª–∏—è\n\n"
                "üîë **–í—Ö–æ–¥:**\n"
                "/login email@example.com password\n\n"
                "üìã **–ü–æ–º–æ—â—å:**\n"
                "/help",
                parse_mode='Markdown'
            )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:**

üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:**
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.**
            """
        else:
            help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üîî **–ê–ª–µ—Ä—Ç—ã:**
/alerts - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–∞—Ö
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üè† **–ü–æ–∏—Å–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/search_house <UNOM> - –ù–∞–π—Ç–∏ –¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É UNOM
/search_coords <lat> <lon> - –ù–∞–π—Ç–∏ –¥–æ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
/ctp_info <CTP_ID> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¶–¢–ü

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats <UNOM> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¥–æ–º–∞
/ctp_stats <CTP_ID> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¶–¢–ü

üîê **–ü—Ä–æ—Ñ–∏–ª—å:**
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/logout - –í—ã—Ö–æ–¥

üõ†Ô∏è **–£—Ç–∏–ª–∏—Ç—ã:**
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**–ü—Ä–∏–º–µ—Ä—ã:**
/search_house 12345
/search_coords 55.7558 37.6176
/stats 12345
            """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω update: {update}")
        logger.info(f"Update type: {update.update_id}")
        
        query = update.callback_query
        
        if not query:
            logger.error("–ü–æ–ª—É—á–µ–Ω update –±–µ–∑ callback_query")
            return
            
        logger.info(f"Callback query data: {query.data}")
        logger.info(f"From user: {query.from_user.id}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await query.answer()
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: {query.data}")
        
        try:
            if query.data == "subscribe_alerts":
                user_id = query.from_user.id
                if self.alert_notifier:
                    self.alert_notifier.add_subscriber(user_id)
                    await query.edit_message_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–∞—Ö!")
                else:
                    await query.edit_message_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                    
            elif query.data == "get_alerts":
                logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
                await self.send_current_alerts(query)
                
            elif query.data == "search_house":
                await query.edit_message_text(
                    "üè† **–ü–æ–∏—Å–∫ –¥–æ–º–∞**\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä UNOM –¥–æ–º–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    "`/search_house <UNOM>`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "‚Ä¢ `/search_house 12345`\n"
                    "‚Ä¢ `/search_coords 55.7558 37.6176`\n"
                    "‚Ä¢ `/stats 12345`\n\n"
                    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ /help",
                    parse_mode='Markdown'
                )
                
            elif query.data == "status":
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è status_command
                class FakeMessage:
                    def __init__(self, edit_func):
                        self.edit_func = edit_func
                        self.effective_user = query.from_user
                    
                    async def reply_text(self, text, **kwargs):
                        await self.edit_func(text, **kwargs)
                
                fake_message = FakeMessage(query.edit_message_text)
                fake_update = type('obj', (object,), {
                    'message': fake_message,
                    'effective_user': query.from_user
                })
                await self.status_command(fake_update, context)
                
            elif query.data == "health":
                if self.advanced_commands:
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è system_health_command
                    class FakeMessage:
                        def __init__(self, edit_func):
                            self.edit_func = edit_func
                            self.effective_user = query.from_user
                        
                        async def reply_text(self, text, **kwargs):
                            await self.edit_func(text, **kwargs)
                    
                    fake_message = FakeMessage(query.edit_message_text)
                    fake_update = type('obj', (object,), {
                        'message': fake_message,
                        'effective_user': query.from_user
                    })
                    await self.advanced_commands.system_health_command(fake_update, context)
                else:
                    await query.edit_message_text("‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                    
            elif query.data == "help":
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è help_command
                class FakeMessage:
                    def __init__(self, edit_func):
                        self.edit_func = edit_func
                        self.effective_user = query.from_user
                    
                    async def reply_text(self, text, **kwargs):
                        await self.edit_func(text, **kwargs)
                
                fake_message = FakeMessage(query.edit_message_text)
                fake_update = type('obj', (object,), {
                    'message': fake_message,
                    'effective_user': query.from_user
                })
                await self.help_command(fake_update, context)
                
                
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ {query.data}: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

    async def debug_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update}")
        if update.callback_query:
            logger.info(f"DEBUG: Callback query: {update.callback_query.data}")
        if update.message:
            logger.info(f"DEBUG: Message text: {update.message.text}")

    async def send_current_alerts(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await query.edit_message_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã —á–µ—Ä–µ–∑ API –±—ç–∫–µ–Ω–¥–∞
            response = requests.get(f"{self.api_base_url}/alerts", timeout=10)
            
            if response.status_code != 200:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç API.")
                return
            
            alerts = response.json()
            
            if not alerts:
                await query.edit_message_text("‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç.")
                return
                
            message = "üö® **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:**\n\n"
            for i, alert in enumerate(alerts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –∞–ª–µ—Ä—Ç–æ–≤
                level_emoji = {
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": "üî¥",
                    "–í—ã—Å–æ–∫–∏–π": "üü†", 
                    "–°—Ä–µ–¥–Ω–∏–π": "üü°",
                    "–ù–∏–∑–∫–∏–π": "üü¢"
                }.get(alert.get('level', ''), '‚ö™')
                
                message += f"{i}. {level_emoji} **{alert.get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}**\n"
                message += f"   üè† {alert.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {alert.get('object_id', 'N/A')}\n"
                message += f"   üìù {alert.get('alert_message', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                message += f"   üí° {alert.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n\n"
                
            if len(alerts) > 5:
                message += f"... –∏ –µ—â–µ {len(alerts) - 5} –∞–ª–µ—Ä—Ç–æ–≤"
                
            await query.edit_message_text(message, parse_mode='Markdown')
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def alerts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /alerts"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã —á–µ—Ä–µ–∑ API –±—ç–∫–µ–Ω–¥–∞
            response = requests.get(f"{self.api_base_url}/alerts", timeout=10)
            
            if response.status_code != 200:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç API.")
                return
            
            alerts = response.json()
            
            if not alerts:
                await update.message.reply_text("‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç.")
                return
                
            message = "üö® **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:**\n\n"
            for i, alert in enumerate(alerts, 1):
                level_emoji = {
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": "üî¥",
                    "–í—ã—Å–æ–∫–∏–π": "üü†", 
                    "–°—Ä–µ–¥–Ω–∏–π": "üü°",
                    "–ù–∏–∑–∫–∏–π": "üü¢"
                }.get(alert.get('level', ''), '‚ö™')
                
                message += f"{i}. {level_emoji} **{alert.get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}**\n"
                message += f"   üè† {alert.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {alert.get('object_id', 'N/A')}\n"
                message += f"   üìù {alert.get('alert_message', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                message += f"   üí° {alert.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n\n"
                
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤.")

    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /subscribe"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
            
        if self.alert_notifier:
            self.alert_notifier.add_subscriber(user_id)
            await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–∞—Ö!")
        else:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /unsubscribe"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
            
        if self.alert_notifier:
            self.alert_notifier.remove_subscriber(user_id)
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞–ª–µ—Ä—Ç–∞—Ö.")
        else:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    async def search_house_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search_house <UNOM>"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
            
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä UNOM –¥–æ–º–∞.\n–ü—Ä–∏–º–µ—Ä: /search_house 12345")
            return
            
        try:
            unom = int(context.args[0])
            await self.get_house_info(update, unom)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UNOM. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")

    async def search_coords_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search_coords <lat> <lon>"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
            
        if len(context.args) != 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.\n–ü—Ä–∏–º–µ—Ä: /search_coords 55.7558 37.6176")
            return
            
        try:
            lat = float(context.args[0])
            lon = float(context.args[1])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–º–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            response = requests.get(f"{self.api_base_url}/house_by_coordinates", 
                                  params={'lat': lat, 'lon': lon, 'timestamp': datetime.now().isoformat()})
            
            if response.status_code == 200:
                data = response.json()
                house_info = data.get('house_info', {})
                stats = data.get('statistics', {})
                
                message = f"üè† **–ù–∞–π–¥–µ–Ω–Ω—ã–π –¥–æ–º:**\n\n"
                message += f"üìç UNOM: {house_info.get('unom', 'N/A')}\n"
                message += f"üè¢ –¶–¢–ü: {house_info.get('ctp', 'N/A')}\n"
                message += f"üìä –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {stats.get('current_real_consumption', 0):.2f} –º¬≥/—á\n"
                message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {stats.get('current_predicted_consumption', 0):.2f} –º¬≥/—á\n"
                message += f"üìâ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats.get('deviation_percentage', 0):.1f}%"
                
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –î–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")

    async def get_house_info(self, update: Update, unom: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ –ø–æ UNOM"""
        try:
            if not self.consumption_df is None:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                end_ts = pd.Timestamp.now()
                start_ts = end_ts - pd.Timedelta(hours=24)
                
                consumption_data = await get_consumption_for_period_unom(
                    unom, start_ts, end_ts, self.consumption_df, excedents_df=self.excedents_df
                )
                
                if consumption_data.empty:
                    await update.message.reply_text(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–º–∞ {unom} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                # –ù–∞—Ö–æ–¥–∏–º –¶–¢–ü –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–º–∞
                ctp_name = None
                for ctp, unoms in self.ctp_to_unom_map.items():
                    if unom in unoms:
                        ctp_name = ctp
                        break
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                real_values = consumption_data['—Ä–µ–∞–ª—å–Ω—ã–π']
                predicted_values = consumption_data['–ø—Ä–æ–≥–Ω–æ–∑']
                
                message = f"üè† **–î–æ–º {unom}**\n\n"
                message += f"üè¢ –¶–¢–ü: {ctp_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                message += f"üìä –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {real_values.iloc[-1]:.2f} –º¬≥/—á\n"
                message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {predicted_values.iloc[-1]:.2f} –º¬≥/—á\n"
                message += f"üìâ –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {real_values.mean():.2f} –º¬≥/—á\n"
                message += f"üìä –ú–∞–∫—Å–∏–º—É–º: {real_values.max():.2f} –º¬≥/—á\n"
                message += f"üìä –ú–∏–Ω–∏–º—É–º: {real_values.min():.2f} –º¬≥/—á\n"
                message += f"üìà –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {((real_values - predicted_values).mean() / predicted_values.mean() * 100):.1f}%"
                
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ {unom}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ.")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats <UNOM>"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
            
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä UNOM –¥–æ–º–∞.\n–ü—Ä–∏–º–µ—Ä: /stats 12345")
            return
            
        try:
            unom = int(context.args[0])
            await self.get_house_info(update, unom)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UNOM. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "üîê **–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            api_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω"
            try:
                response = requests.get(f"{self.api_base_url}/alerts", timeout=5)
                if response.status_code != 200:
                    api_status = "üü° –ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω"
            except:
                api_status = "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data_status = "üü¢ –ó–∞–≥—Ä—É–∂–µ–Ω—ã" if self.consumption_df is not None else "üî¥ –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            records_count = len(self.consumption_df) if self.consumption_df is not None else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            subscribers_count = self.alert_notifier.get_subscribers_count() if self.alert_notifier else 0
            
            message = f"üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            message += f"üåê API: {api_status}\n"
            message += f"üìä –î–∞–Ω–Ω—ã–µ: {data_status}\n"
            message += f"üìà –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {records_count:,}\n"
            message += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

    async def send_alert_to_subscribers(self, alert: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.subscribed_users:
            return
            
        level_emoji = {
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": "üî¥",
            "–í—ã—Å–æ–∫–∏–π": "üü†", 
            "–°—Ä–µ–¥–Ω–∏–π": "üü°",
            "–ù–∏–∑–∫–∏–π": "üü¢"
        }.get(alert.get('level', ''), '‚ö™')
        
        message = f"üö® **–ù–æ–≤—ã–π –∞–ª–µ—Ä—Ç!**\n\n"
        message += f"{level_emoji} **{alert.get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}**\n"
        message += f"üè† {alert.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {alert.get('object_id', 'N/A')}\n"
        message += f"üìù {alert.get('alert_message', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        message += f"üí° {alert.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n"
        message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        for user_id in self.subscribed_users:
            try:
                await self.application.bot.send_message(
                    chat_id=user_id, 
                    text=message, 
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def check_and_send_alerts(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç—ã —á–µ—Ä–µ–∑ API –±—ç–∫–µ–Ω–¥–∞
            response = requests.get(f"{self.api_base_url}/alerts", timeout=10)
            
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç API: {response.status_code}")
                return
            
            alerts = response.json()
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
            # –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            for alert in alerts:
                await self.send_alert_to_subscribers(alert)
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")

    async def login_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /login"""
        user_id = update.effective_user.id
        
        try:
            if len(context.args) != 2:
                await update.message.reply_text(
                    "üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /login <email> <–ø–∞—Ä–æ–ª—å>\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    "/login user@example.com mypassword",
                    parse_mode='Markdown'
                )
                return
            
            email = context.args[0]
            password = context.args[1]
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ API
            auth_response = requests.post(f"{self.api_base_url}/auth/login", 
                                        json={
                                            "email": email,
                                            "password": password,
                                            "telegram_id": user_id
                                        })
            
            if auth_response.status_code == 200:
                data = auth_response.json()
                user_info = data['user']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.authorized_users[user_id] = {
                    'session_token': data['session_token'],
                    'user_info': user_info
                }
                
                await update.message.reply_text(
                    f"‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n\n"
                    f"üë§ **{user_info.get('full_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}**\n"
                    f"üìß Email: {user_info['email']}\n"
                    f"üé≠ –†–æ–ª—å: {user_info['role']}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
                    parse_mode='Markdown'
                )
            else:
                error_data = auth_response.json()
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**\n\n{error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def register_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /register"""
        try:
            if len(context.args) < 2:
                await update.message.reply_text(
                    "üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /register <email> <–ø–∞—Ä–æ–ª—å> [–∏–º—è]\n\n"
                    "–ü—Ä–∏–º–µ—Ä:\n"
                    "/register user@example.com mypassword –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
                    parse_mode='Markdown'
                )
                return
            
            email = context.args[0]
            password = context.args[1]
            full_name = " ".join(context.args[2:]) if len(context.args) > 2 else ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
            if len(password) < 6:
                await update.message.reply_text(
                    "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
                    parse_mode='Markdown'
                )
                return
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è —á–µ—Ä–µ–∑ API
            reg_response = requests.post(f"{self.api_base_url}/auth/register", 
                                       json={
                                           "email": email,
                                           "password": password,
                                           "full_name": full_name
                                       })
            
            if reg_response.status_code == 201:
                await update.message.reply_text(
                    "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n\n"
                    f"üìß Email: {email}\n"
                    f"üë§ –ò–º—è: {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /login",
                    parse_mode='Markdown'
                )
            else:
                error_data = reg_response.json()
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n{error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "‚ùå **–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É",
                parse_mode='Markdown'
            )
            return
        
        try:
            user_info = self.authorized_users[user_id]['user_info']
            
            await update.message.reply_text(
                f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                f"üìß Email: {user_info['email']}\n"
                f"üë§ –ò–º—è: {user_info.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üé≠ –†–æ–ª—å: {user_info['role']}\n"
                f"üÜî Telegram ID: {user_id}\n\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

    async def logout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /logout"""
        user_id = update.effective_user.id
        
        if user_id not in self.authorized_users:
            await update.message.reply_text(
                "‚ÑπÔ∏è **–í—ã —É–∂–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã**",
                parse_mode='Markdown'
            )
            return
        
        try:
            session_token = self.authorized_users[user_id]['session_token']
            
            # –í—ã—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ API
            requests.post(f"{self.api_base_url}/auth/logout",
                         headers={'Authorization': f'Bearer {session_token}'})
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
            del self.authorized_users[user_id]
            
            await update.message.reply_text(
                "‚úÖ **–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /login",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.")


    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("alerts", self.alerts_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        self.application.add_handler(CommandHandler("search_house", self.search_house_command))
        self.application.add_handler(CommandHandler("search_coords", self.search_coords_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.application.add_handler(CommandHandler("login", self.login_command))
        self.application.add_handler(CommandHandler("register", self.register_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(CommandHandler("logout", self.logout_command))
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if self.advanced_commands:
            self.application.add_handler(CommandHandler("ctp_info", self.advanced_commands.ctp_info_command))
            self.application.add_handler(CommandHandler("ctp_stats", self.advanced_commands.ctp_stats_command))
            self.application.add_handler(CommandHandler("compare", self.advanced_commands.compare_houses_command))
            self.application.add_handler(CommandHandler("top_consumers", self.advanced_commands.top_consumers_command))
            self.application.add_handler(CommandHandler("health", self.advanced_commands.system_health_command))
            self.application.add_handler(CommandHandler("export", self.advanced_commands.export_data_command))
            self.application.add_handler(CommandHandler("help_advanced", self.advanced_commands.help_advanced_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback, pattern=None))
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.application.add_handler(MessageHandler(filters.ALL, self.debug_handler))

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        await self.initialize_data()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.application.run_polling()
    
    def run_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        import asyncio
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
        try:
            loop = asyncio.get_running_loop()
            # –ï—Å–ª–∏ –µ—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
            import threading
            import concurrent.futures
            
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(asyncio.run, self.run())
                future.result()
        except RuntimeError:
            # –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ event loop, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run
            asyncio.run(self.run())

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = os.path.join(os.path.dirname(__file__), '..', 'configs', 'telegram_config.json')
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        bot_token = config.get('bot_token')
        if not bot_token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = TelegramBot(bot_token)
        asyncio.run(bot.run())
        
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª configs/telegram_config.json —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
