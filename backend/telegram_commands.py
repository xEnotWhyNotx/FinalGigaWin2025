"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram –±–æ—Ç–∞.
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è.
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import pandas as pd

from consumption_loader import get_consumption_for_period_unom, get_consumption_for_period_ctp, load_excedents_data, simulate_real_consumption

logger = logging.getLogger(__name__)

class AdvancedTelegramCommands:
    """–ö–ª–∞—Å—Å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        
    async def ctp_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /ctp_info <CTP_ID> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¶–¢–ü"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¶–¢–ü.\n–ü—Ä–∏–º–µ—Ä: /ctp_info –¶–¢–ü-1")
            return
            
        ctp_id = context.args[0]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            end_ts = pd.Timestamp.now()
            start_ts = end_ts - pd.Timedelta(hours=24)
            
            consumption_data = await get_consumption_for_period_ctp(
                ctp_id, start_ts, end_ts, 
                self.bot.consumption_df, 
                self.bot.ctp_to_unom_map,
                excedents_df=self.bot.excedents_df
            )
            
            if consumption_data.empty:
                await update.message.reply_text(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –¶–¢–ü {ctp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –¶–¢–ü
            connected_houses = self.bot.ctp_to_unom_map.get(ctp_id, [])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            real_values = consumption_data['—Ä–µ–∞–ª—å–Ω—ã–π']
            predicted_values = consumption_data['–ø—Ä–æ–≥–Ω–æ–∑']
            
            message = f"üè¢ **–¶–¢–ü {ctp_id}**\n\n"
            message += f"üè† –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ–º–æ–≤: {len(connected_houses)}\n"
            message += f"üìä –¢–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {real_values.iloc[-1]:.2f} –º¬≥/—á\n"
            message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {predicted_values.iloc[-1]:.2f} –º¬≥/—á\n"
            message += f"üìâ –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {real_values.mean():.2f} –º¬≥/—á\n"
            message += f"üìä –ú–∞–∫—Å–∏–º—É–º: {real_values.max():.2f} –º¬≥/—á\n"
            message += f"üìä –ú–∏–Ω–∏–º—É–º: {real_values.min():.2f} –º¬≥/—á\n"
            message += f"üìà –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {((real_values - predicted_values).mean() / predicted_values.mean() * 100):.1f}%\n\n"
            
            if connected_houses:
                message += f"üè† **–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–æ–º–∞:**\n"
                for i, house in enumerate(connected_houses[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    message += f"{i}. UNOM {house}\n"
                if len(connected_houses) > 10:
                    message += f"... –∏ –µ—â–µ {len(connected_houses) - 10} –¥–æ–º–æ–≤"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¶–¢–ü {ctp_id}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¶–¢–ü.")

    async def ctp_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /ctp_stats <CTP_ID> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¶–¢–ü"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¶–¢–ü.\n–ü—Ä–∏–º–µ—Ä: /ctp_stats –¶–¢–ü-1")
            return
            
        ctp_id = context.args[0]
        await self.ctp_info_command(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É

    async def compare_houses_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /compare <UNOM1> <UNOM2> - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –¥–æ–º–æ–≤"""
        if len(context.args) != 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ –Ω–æ–º–µ—Ä–∞ UNOM.\n–ü—Ä–∏–º–µ—Ä: /compare 12345 67890")
            return
            
        try:
            unom1 = int(context.args[0])
            unom2 = int(context.args[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è –æ–±–æ–∏—Ö –¥–æ–º–æ–≤
            end_ts = pd.Timestamp.now()
            start_ts = end_ts - pd.Timedelta(hours=24)
            
            data1 = await get_consumption_for_period_unom(unom1, start_ts, end_ts, self.bot.consumption_df, excedents_df=self.bot.excedents_df)
            data2 = await get_consumption_for_period_unom(unom2, start_ts, end_ts, self.bot.consumption_df, excedents_df=self.bot.excedents_df)
            
            if data1.empty or data2.empty:
                await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–æ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–æ–º–∞
            real1 = data1['—Ä–µ–∞–ª—å–Ω—ã–π']
            pred1 = data1['–ø—Ä–æ–≥–Ω–æ–∑']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –¥–æ–º–∞
            real2 = data2['—Ä–µ–∞–ª—å–Ω—ã–π']
            pred2 = data2['–ø—Ä–æ–≥–Ω–æ–∑']
            
            message = f"üè† **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–º–æ–≤**\n\n"
            message += f"**–î–æ–º {unom1}:**\n"
            message += f"üìä –¢–µ–∫—É—â–µ–µ: {real1.iloc[-1]:.2f} –º¬≥/—á\n"
            message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {pred1.iloc[-1]:.2f} –º¬≥/—á\n"
            message += f"üìâ –°—Ä–µ–¥–Ω–µ–µ: {real1.mean():.2f} –º¬≥/—á\n"
            message += f"üìà –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {((real1 - pred1).mean() / pred1.mean() * 100):.1f}%\n\n"
            
            message += f"**–î–æ–º {unom2}:**\n"
            message += f"üìä –¢–µ–∫—É—â–µ–µ: {real2.iloc[-1]:.2f} –º¬≥/—á\n"
            message += f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {pred2.iloc[-1]:.2f} –º¬≥/—á\n"
            message += f"üìâ –°—Ä–µ–¥–Ω–µ–µ: {real2.mean():.2f} –º¬≥/—á\n"
            message += f"üìà –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {((real2 - pred2).mean() / pred2.mean() * 100):.1f}%\n\n"
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            diff_current = abs(real1.iloc[-1] - real2.iloc[-1])
            diff_avg = abs(real1.mean() - real2.mean())
            
            message += f"**–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:**\n"
            message += f"üìä –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏: {diff_current:.2f} –º¬≥/—á\n"
            message += f"üìâ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏: {diff_avg:.2f} –º¬≥/—á"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UNOM. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–æ–º–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–æ–º–æ–≤.")

    async def top_consumers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /top_consumers - —Ç–æ–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–æ–≤
            current_time = pd.Timestamp.now()
            start_time = current_time - pd.Timedelta(hours=1)
            
            top_consumers = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–æ–º–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            sample_houses = list(self.bot.ctp_to_unom_map.keys())[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¶–¢–ü
            all_houses = []
            for ctp in sample_houses:
                all_houses.extend(self.bot.ctp_to_unom_map[ctp][:10])  # –ü–æ 10 –¥–æ–º–æ–≤ —Å –∫–∞–∂–¥–æ–≥–æ –¶–¢–ü
            
            for unom in all_houses[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –¥–æ–º–∞–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                try:
                    data = await get_consumption_for_period_unom(
                        unom, start_time, current_time, self.bot.consumption_df, excedents_df=self.bot.excedents_df
                    )
                    if not data.empty:
                        current_consumption = data['—Ä–µ–∞–ª—å–Ω—ã–π'].iloc[-1]
                        top_consumers.append((unom, current_consumption))
                except:
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            top_consumers.sort(key=lambda x: x[1], reverse=True)
            
            if not top_consumers:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏.")
                return
            
            message = "üèÜ **–¢–æ–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (—Ç–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ):**\n\n"
            for i, (unom, consumption) in enumerate(top_consumers[:10], 1):
                message += f"{i}. üè† UNOM {unom}: {consumption:.2f} –º¬≥/—á\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π.")

    async def system_health_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_status = {
                "database": "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "api": "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 
                "alerts": "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "data_quality": "üî¥ –ü–ª–æ—Ö–æ–µ"
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.bot.consumption_df is not None and not self.bot.consumption_df.empty:
                health_status["database"] = "üü¢ –î–æ—Å—Ç—É–ø–Ω–∞"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                recent_data = self.bot.consumption_df.tail(100)
                if len(recent_data) > 50:
                    health_status["data_quality"] = "üü¢ –•–æ—Ä–æ—à–µ–µ"
                elif len(recent_data) > 20:
                    health_status["data_quality"] = "üü° –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            try:
                response = requests.get(f"{self.bot.api_base_url}/alerts", timeout=5)
                if response.status_code == 200:
                    health_status["api"] = "üü¢ –î–æ—Å—Ç—É–ø–Ω–∞"
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
            if self.bot.alert_notifier:
                health_status["alerts"] = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_records = len(self.bot.consumption_df) if self.bot.consumption_df is not None else 0
            subscribers = self.bot.alert_notifier.get_subscribers_count() if self.bot.alert_notifier else 0
            
            message = "üè• **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            message += f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {health_status['database']}\n"
            message += f"üåê API: {health_status['api']}\n"
            message += f"üîî –ê–ª–µ—Ä—Ç—ã: {health_status['alerts']}\n"
            message += f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {health_status['data_quality']}\n\n"
            message += f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}\n"
            message += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}\n"
            message += f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%H:%M:%S')}"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.")

    async def export_data_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /export <UNOM> - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞ –≤ JSON"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä UNOM.\n–ü—Ä–∏–º–µ—Ä: /export 12345")
            return
            
        try:
            unom = int(context.args[0])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            end_ts = pd.Timestamp.now()
            start_ts = end_ts - pd.Timedelta(days=7)
            
            data = await get_consumption_for_period_unom(unom, start_ts, end_ts, self.bot.consumption_df, excedents_df=self.bot.excedents_df)
            
            if data.empty:
                await update.message.reply_text(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–º–∞ {unom} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                "unom": unom,
                "period": {
                    "start": start_ts.isoformat(),
                    "end": end_ts.isoformat()
                },
                "data": []
            }
            
            for timestamp, row in data.iterrows():
                export_data["data"].append({
                    "timestamp": timestamp.isoformat(),
                    "predicted": float(row['–ø—Ä–æ–≥–Ω–æ–∑']),
                    "real": float(row['—Ä–µ–∞–ª—å–Ω—ã–π']),
                    "deviation": float(row['—Ä–µ–∞–ª—å–Ω—ã–π'] - row['–ø—Ä–æ–≥–Ω–æ–∑'])
                })
            
            # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
            json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            from io import BytesIO
            file_buffer = BytesIO()
            file_buffer.write(json_data.encode('utf-8'))
            file_buffer.seek(0)
            
            filename = f"house_{unom}_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            await update.message.reply_document(
                document=file_buffer,
                filename=filename,
                caption=f"üìä –î–∞–Ω–Ω—ã–µ –¥–æ–º–∞ {unom} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UNOM.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")

    async def help_advanced_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üîß **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üè¢ **–¶–¢–ü:**
/ctp_info <CTP_ID> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¶–¢–ü
/ctp_stats <CTP_ID> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¶–¢–ü

üè† **–ê–Ω–∞–ª–∏–∑ –¥–æ–º–æ–≤:**
/compare <UNOM1> <UNOM2> - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –¥–æ–º–æ–≤
/top_consumers - –¢–æ–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π

üìä **–î–∞–Ω–Ω—ã–µ:**
/export <UNOM> - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞ –≤ JSON
/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

üîç **–ü–æ–∏—Å–∫:**
/search_house <UNOM> - –ü–æ–∏—Å–∫ –¥–æ–º–∞ –ø–æ UNOM
/search_coords <lat> <lon> - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats <UNOM> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–ª–µ—Ä—Ç—ã
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∞–ª–µ—Ä—Ç–æ–≤
/alerts - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã

**–ü—Ä–∏–º–µ—Ä—ã:**
/ctp_info –¶–¢–ü-1
/compare 12345 67890
/export 12345
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
