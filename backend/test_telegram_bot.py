#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import asyncio
import json
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from alert_integration import AlertNotifier
from consumption_loader import load_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def test_alert_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    logger.info("=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ ===")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        ctp_to_unom_map, consumption_df = load_data()
        
        if consumption_df is None or ctp_to_unom_map is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
            
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(consumption_df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π AlertNotifier
        notifier = AlertNotifier("test_token", "http://localhost:5001")
        await notifier.initialize_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –∞–ª–µ—Ä—Ç–æ–≤
        summary = await notifier.get_current_alerts_summary()
        logger.info(f"–°–≤–æ–¥–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤: {json.dumps(summary, indent=2, ensure_ascii=False)}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        return False

async def test_data_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        ctp_to_unom_map, consumption_df = load_data()
        
        if consumption_df is None:
            logger.error("DataFrame –ø—É—Å—Ç")
            return False
            
        if ctp_to_unom_map is None:
            logger.error("–ö–∞—Ä—Ç–∞ –¶–¢–ü –ø—É—Å—Ç–∞")
            return False
            
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(consumption_df)} –∑–∞–ø–∏—Å–µ–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(ctp_to_unom_map)} –¶–¢–ü")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ DataFrame: {list(consumption_df.columns)}")
        logger.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {consumption_df.index.min()} - {consumption_df.index.max()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¶–¢–ü
        for i, (ctp, houses) in enumerate(list(ctp_to_unom_map.items())[:3]):
            logger.info(f"–¶–¢–ü {ctp}: {len(houses)} –¥–æ–º–æ–≤")
            
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_consumption_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º"""
    logger.info("=== –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è ===")
    
    try:
        from consumption_loader import get_consumption_for_period_unom, get_consumption_for_period_ctp
        import pandas as pd
        
        ctp_to_unom_map, consumption_df = load_data()
        
        if consumption_df is None or ctp_to_unom_map is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return False
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–º–∞
        test_unom = list(ctp_to_unom_map.values())[0][0]  # –ü–µ—Ä–≤—ã–π –¥–æ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¶–¢–ü
        end_ts = pd.Timestamp.now()
        start_ts = end_ts - pd.Timedelta(hours=24)
        
        house_data = await get_consumption_for_period_unom(
            test_unom, start_ts, end_ts, consumption_df
        )
        
        if house_data.empty:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–º–∞ {test_unom}")
        else:
            logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–º–∞ {test_unom}: {len(house_data)} –∑–∞–ø–∏—Å–µ–π")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¶–¢–ü
        test_ctp = list(ctp_to_unom_map.keys())[0]
        ctp_data = await get_consumption_for_period_ctp(
            test_ctp, start_ts, end_ts, consumption_df, ctp_to_unom_map
        )
        
        if ctp_data.empty:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¶–¢–ü {test_ctp}")
        else:
            logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –¶–¢–ü {test_ctp}: {len(ctp_data)} –∑–∞–ø–∏—Å–µ–π")
            
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")
        return False

async def test_config_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    try:
        config_path = Path(__file__).parent.parent / 'configs' / 'telegram_config.json'
        
        if not config_path.exists():
            logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª configs/telegram_config.json —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
            return False
            
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
            
        bot_token = config.get('bot_token')
        if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
            logger.warning("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram –±–æ—Ç–∞...")
    
    tests = [
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", test_data_loading),
        ("–§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", test_consumption_functions),
        ("–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤", test_alert_system),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config_loading),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n--- {test_name} ---")
        try:
            result = await test_func()
            results.append((test_name, result))
            if result:
                logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "="*50)
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("="*50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == '__main__':
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
