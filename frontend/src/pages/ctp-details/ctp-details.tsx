// pages/ctp-details/ctp-details.tsx
// @ts-nocheck
import React, { useState } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  CircularProgress,
  Button,
  Stack,
  Grid,
  Alert,
  Card,
  CardContent,
  Chip,
} from '@mui/material';
import { 
  ArrowBack, 
  LocalFireDepartment, 
  WaterDrop, 
  ElectricBolt, 
  Speed, 
  Analytics,
  LocationOn,
  Settings,
  Apartment,
  Home,
  SquareFoot,
  People
} from '@mui/icons-material';
import { useCTPPressure } from '../../shared/hooks/use-ctp-pressure/use-ctp-pressure';

import { EfficiencyChart } from '../../components/charts/efficiency-chart/efficiency-chart';
import { PowerChart } from '../../components/charts/power-chart/power-chart';
import { PressureChart } from '../../components/charts/pressure-chart/pressure-chart';
import { WaterConsumptionChart } from '../../components/charts/water-consumption-chart/water-consumption-chart';
import { createCTPBalloonContent } from '../../components/map/map.utils';
import { useSelector } from 'react-redux';

import image from '../../../public/tech.png'

interface Properties {
  address?: string;
  name?: string;
  floors?: number;
  appartments?: number;
  live_area?: number;
  ctp?: string;
  UNOM?: string;
  osm_id?: string;
  capacity?: string;
  status?: string;
  id?: string;
}

interface CTPDetailsPageProps {}

export const CTPDetailsPage: React.FC<CTPDetailsPageProps> = () => {
  const { ctpId } = useParams<{ ctpId: string }>();
  const navigate = useNavigate();
  const location = useLocation();

  // –ü–æ–ª—É—á–∞–µ–º properties –∏–∑ state –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const properties: Properties = location.state?.properties || {};
  
  // –ë–µ—Ä–µ–º timestamp –∏–∑ Redux store
  const timestampFromStore = useSelector((state: any) => state.alerts.currentTimestamp);

  // –ï—Å–ª–∏ –≤ store –Ω–µ—Ç timestamp, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
  const getFormattedTimestamp = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
  };

  const [fallbackTimestamp] = useState(getFormattedTimestamp());

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∏–∑ store –∏–ª–∏ fallback
  const timestamp = timestampFromStore || fallbackTimestamp;

  const { data: ctpData, isLoading, error } = useCTPPressure({
    ctp_id: ctpId!,
    timestamp: timestamp,
  });

  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üìÖ Using timestamp:', timestamp);
  console.log('üìÖ From store:', timestampFromStore);
  console.log('üìÖ Fallback:', fallbackTimestamp);


  const handleBack = () => {
    navigate(-1);
  };

  console.log('üîç CTP Details Debug:', {
    ctpId,
    timestamp,
    hasData: !!ctpData,
    isLoading,
    error,
    ctpData,
    properties // –î–æ–±–∞–≤–ª—è–µ–º properties –≤ –ª–æ–≥
  });

  if (isLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <Stack spacing={2} alignItems="center">
          <CircularProgress size={60} />
          <Typography variant="h6" color="text.secondary">
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¶–¢–ü...
          </Typography>
        </Stack>
      </Box>
    );
  }

  if (error) {
    return (
      <Box p={3}>
        <Alert severity="error" sx={{ mb: 2 }}>
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¶–¢–ü {ctpId}
        </Alert>
        <Button 
          onClick={handleBack} 
          startIcon={<ArrowBack />} 
          variant="contained"
        >
          –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ
        </Button>
      </Box>
    );
  }

  if (!ctpData) {
    return (
      <Box p={3}>
        <Alert severity="warning" sx={{ mb: 2 }}>
          –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¶–¢–ü {ctpId}
        </Alert>
        <Button 
          onClick={handleBack} 
          startIcon={<ArrowBack />} 
          variant="outlined"
        >
          –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ
        </Button>
      </Box>
    );
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É –≤ –∫–ª—é—á–µ –¥–∞–Ω–Ω—ã—Ö
  const consumptionData = ctpData.cunsumption_data || ctpData.consumption_data;
  const systemState = ctpData.system_state || {};
  const systemChar = ctpData.system_characteristic || {};

  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∏—Å—Ç–µ–º—ã
  const systemStatsCards = [
    {
      icon: <WaterDrop sx={{ fontSize: 24 }} />,
      title: '–¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥',
      value: `${systemState.current_consumtion?.toFixed(1) || '0'} –º¬≥/—á`,
      color: 'primary'
    },
    {
      icon: <Speed sx={{ fontSize: 24 }} />,
      title: '–ù–∞–ø–æ—Ä',
      value: `${systemState.measured_pressure?.toFixed(1) || '0'} –º –≤–æ–¥. —Å—Ç.`,
      color: 'secondary'
    },
    {
      icon: <ElectricBolt sx={{ fontSize: 24 }} />,
      title: '–ú–æ—â–Ω–æ—Å—Ç—å',
      value: `${systemState.current_power?.toFixed(1) || '0'} –∫–í—Ç`,
      color: 'warning'
    },
    {
      icon: <Analytics sx={{ fontSize: 24 }} />,
      title: '–ö–ü–î —Å–∏—Å—Ç–µ–º—ã',
      value: `${systemState.current_kpd?.toFixed(1) || '0'} %`,
      color: 'success'
    }
  ];

  const {
    ctp,
    source_pressure,
    static_pressure,
    max_flow,
    max_pressure,
    pump_count,
    pump_name,
    pump_max_flow,
    pipe_length,
    pipe_diameter
  } = properties;


  return (
    <Box sx={{ p: 3, backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      {/* –•–µ–¥–µ—Ä */}
      <Paper 
        sx={{ 
          p: 3, 
          mb: 3, 
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          borderRadius: 2
        }}
      >
        <Stack direction="row" spacing={2} alignItems="center" sx={{ mb: 2 }}>
          <Button 
            onClick={handleBack} 
            startIcon={<ArrowBack />}
            sx={{ 
              color: 'white', 
              borderColor: 'white',
              '&:hover': {
                backgroundColor: 'rgba(255,255,255,0.1)'
              }
            }}
            variant="outlined"
          >
            –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ
          </Button>
          <LocalFireDepartment sx={{ fontSize: 40 }} />
          <Box flex={1}>
            <Typography variant="h4" fontWeight="bold">
              –¶–¢–ü {ctpId}
            </Typography>
            <Typography variant="body1" sx={{ opacity: 0.9 }}>
              {properties.name || properties.address || '–¢–µ–ø–ª–æ–≤–æ–π –ø—É–Ω–∫—Ç'}
            </Typography>
          </Box>
          <Chip 
            icon={<LocationOn />}
            label={properties.status || "–ê–∫—Ç–∏–≤–µ–Ω"}
            color={properties.status === '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω' ? 'error' : 'success'}
            variant="filled"
            sx={{ backgroundColor: 'rgba(255,255,255,0.2)', color: 'white' }}
          />
        </Stack>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ –∏ —Å–∏—Å—Ç–µ–º–µ */}
        <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
            <Stack spacing={1}>
              <Typography variant="subtitle1" fontWeight="bold">
                üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {properties.address && (
                  <Chip 
                    label={`–ê–¥—Ä–µ—Å: ${properties.address}`}
                    size="small"
                    variant="outlined"
                    sx={{ backgroundColor: 'rgba(255,255,255,0.1)', color: 'white' }}
                  />
                )}
                {properties.UNOM && (
                  <Chip 
                    label={`–£–ù–û–ú: ${properties.UNOM}`}
                    size="small"
                    variant="outlined"
                    sx={{ backgroundColor: 'rgba(255,255,255,0.1)', color: 'white' }}
                  />
                )}
                {properties.capacity && (
                  <Chip 
                    label={`–ú–æ—â–Ω–æ—Å—Ç—å: ${properties.capacity}`}
                    size="small"
                    variant="outlined"
                    sx={{ backgroundColor: 'rgba(255,255,255,0.1)', color: 'white' }}
                  />
                )}
              </Box>
            </Stack>
          </Grid>
<Grid item xs={12} md={6}>
  <Stack spacing={1}>
    <Typography variant="subtitle1" fontWeight="bold" sx={{ color: 'white' }}>
      üìà –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    </Typography>
    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
      <Chip 
        label={`–í —Ä–∞–±–æ—Ç–µ: ${systemState.pumps_working || 0} –Ω–∞—Å–æ—Å–æ–≤`}
        size="small"
        variant="filled"
        sx={{ 
          backgroundColor: 'rgba(76, 175, 80, 0.9)',
          color: 'white',
          fontSize: '0.8rem',
          fontWeight: 'bold',
          padding: '6px 8px',
          height: 'auto',
          minWidth: '120px',
          '& .MuiChip-label': {
            padding: '4px 6px'
          }
        }}
      />
      <Chip 
        label={`–£–¥. –º–æ—â–Ω–æ—Å—Ç—å: ${systemState.unit_power?.toFixed(2) || '0'} –∫–í—Ç`}
        size="small"
        variant="filled"
        sx={{ 
          backgroundColor: 'rgba(33, 150, 243, 0.9)',
          color: 'white',
          fontSize: '0.8rem',
          fontWeight: 'bold',
          padding: '6px 8px',
          height: 'auto',
          minWidth: '120px',
          '& .MuiChip-label': {
            padding: '4px 6px'
          }
        }}
      />
    </Box>
  </Stack>
</Grid>
        </Grid>
      </Paper>


                

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ */}
      <Grid container spacing={3}>
        {/* –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã */}
        <Grid item xs={12} lg={6}>
          <Paper 
            sx={{ 
              p: 3, 
              height: 400,
              borderRadius: 2,
              boxShadow: '0 4px 12px rgba(0,0,0,0.05)'
            }}
          >
            <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 2 }}>
              <WaterDrop color="primary" />
              <Typography variant="h6" fontWeight="bold">
                –†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã
              </Typography>
            </Stack>
            {consumptionData ? (
              <WaterConsumptionChart data={consumptionData} />
            ) : (
              <Box display="flex" justifyContent="center" alignItems="center" height="100%">
                <Typography variant="body2" color="text.secondary">
                  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–µ –≤–æ–¥—ã
                </Typography>
              </Box>
            )}
          </Paper>
        </Grid>

        {/* –ì—Ä–∞—Ñ–∏–∫ 2: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø–æ—Ä) */}
        <Grid item xs={12} lg={6}>
          <Paper 
            sx={{ 
              p: 3, 
              height: 400,
              borderRadius: 2,
              boxShadow: '0 4px 12px rgba(0,0,0,0.05)'
            }}
          >
            <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 2 }}>
              <Speed color="secondary" />
              <Typography variant="h6" fontWeight="bold">
                QH-—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
              </Typography>
            </Stack>
            <PressureChart data={ctpData.pressure_data} />
          </Paper>
        </Grid>

        {/* –ì—Ä–∞—Ñ–∏–∫ 3: –ü–æ—Ç—Ä–µ–±–ª—è–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å */}
        <Grid item xs={12} lg={6}>
          <Paper 
            sx={{ 
              p: 3, 
              height: 400,
              borderRadius: 2,
              boxShadow: '0 4px 12px rgba(0,0,0,0.05)'
            }}
          >
            <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 2 }}>
              <ElectricBolt color="warning" />
              <Typography variant="h6" fontWeight="bold">
                –ü–æ—Ç—Ä–µ–±–ª—è–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å 1 –Ω–∞—Å–æ—Å–∞
              </Typography>
            </Stack>
            <PowerChart data={ctpData.power_data} />
          </Paper>
        </Grid>

        {/* –ì—Ä–∞—Ñ–∏–∫ 4: –ö–ü–î –Ω–∞—Å–æ—Å–∞ */}
        <Grid item xs={12} lg={6}>
          <Paper 
            sx={{ 
              p: 3, 
              height: 400,
              borderRadius: 2,
              boxShadow: '0 4px 12px rgba(0,0,0,0.05)'
            }}
          >
            <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 2 }}>
              <Analytics color="success" />
              <Typography variant="h6" fontWeight="bold">
                –ö–ü–î –Ω–∞—Å–æ—Å–∞
              </Typography>
            </Stack>
            <EfficiencyChart data={ctpData.kpd_data} />
          </Paper>
        </Grid>
      </Grid>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Paper 
        sx={{ 
          p: 3, 
          mt: 3,
          borderRadius: 2,
          boxShadow: '0 4px 12px rgba(0,0,0,0.05)'
        }}
      >
        <Stack direction="row" alignItems="center" spacing={1} sx={{ mb: 2 }}>
          <Settings color="action" />
          <Typography variant="h6" fontWeight="bold">
            –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </Typography>
        </Stack>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å–æ—Å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
            </Typography>
            <Stack spacing={1}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Typography variant="body2">–ú–æ–¥–µ–ª—å –Ω–∞—Å–æ—Å–∞:</Typography>
                <Typography variant="body2" fontWeight="bold">
                  {systemChar.pump_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Typography variant="body2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å–æ—Å–æ–≤:</Typography>
                <Typography variant="body2" fontWeight="bold">
                  {systemChar.pump_count || 0} —à—Ç
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Typography variant="body2">–ú–∞–∫—Å. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</Typography>
                <Typography variant="body2" fontWeight="bold">
                  {systemChar.pump_max_flow || 0} –º¬≥/—á
                </Typography>
              </Box>
            </Stack>
          </Grid>
          <Grid item xs={12} md={6}>
            <Typography variant="subtitle2" color="text.secondary" gutterBottom>
              –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞
            </Typography>
            <Stack spacing={1}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Typography variant="body2">–î–∏–∞–º–µ—Ç—Ä —Ç—Ä—É–±—ã:</Typography>
                <Typography variant="body2" fontWeight="bold">
                  {systemChar.pipe_diameter || 0} –º–º
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Typography variant="body2">–î–ª–∏–Ω–∞ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞:</Typography>
                <Typography variant="body2" fontWeight="bold">
                  {systemChar.pipe_length || 0} –º
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <Typography variant="body2">–û–±–Ω–æ–≤–ª–µ–Ω–æ:</Typography>
                <Typography variant="body2" fontWeight="bold">
                  {new Date().toLocaleString('ru-RU')}
                </Typography>
              </Box>
            </Stack>
          </Grid>
          {/* <Grid>
            <img src={image}/>
          </Grid> */}
        </Grid>
      </Paper>
    </Box>
  );
};