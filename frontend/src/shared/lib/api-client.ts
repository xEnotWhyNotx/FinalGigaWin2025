// lib/api-client.ts
import axios from 'axios';
import { API_CONFIG } from '../config/api';

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const getApiBaseUrl = (): string => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config/api.ts
  return API_CONFIG.baseURL;
};

const API_BASE_URL = getApiBaseUrl();

export const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
apiClient.interceptors.request.use(
  (config) => {
    console.log('üîÑ Making API request to:', config.url, 'with base URL:', config.baseURL);
    console.log('üìç Current location:', window.location.href);
    console.log('üåê Hostname:', window.location.hostname, 'Port:', window.location.port);
    return config;
  }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
apiClient.interceptors.response.use(
  (response) => {
    console.log('‚úÖ API Response:', response.status, 'from', response.config.url);
    return response;
  },
  (error) => {
    const currentLocation = window.location.href;
    const apiUrl = error.config?.baseURL || API_BASE_URL;
    const fullUrl = `${error.config?.baseURL || ''}${error.config?.url || ''}`;
    
    console.error('‚ùå API Error Details:', {
      currentLocation: currentLocation,
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      apiBaseUrl: apiUrl,
      requestUrl: error.config?.url,
      fullRequestUrl: fullUrl,
      hostname: window.location.hostname,
      port: window.location.port
    });
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
    if (error.code === 'ECONNREFUSED') {
      throw new Error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${apiUrl}`);
    }
    
    if (error.code === 'NETWORK_ERROR') {
      throw new Error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ${fullUrl}`);
    }
    
    throw new Error(
      error.response?.data?.error || 
      `‚ùå API Error (${error.response?.status || 'network'}): ${error.message || 'Unknown error'}`
    );
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { API_BASE_URL };