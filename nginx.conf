events {
    worker_connections 1024;
}

http {
    # Upstream для backend API
    upstream backend {
        server backend:5001;
    }

    # Upstream для frontend
    upstream frontend {
        server frontend:3000;
    }

    # HTTP сервер - редирект на HTTPS
    server {
        listen 80;
        server_name gigawin.unicorns-group.ru 10.8.0.17 localhost;

        # Health check endpoint (доступен по HTTP)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Все остальные запросы редиректим на HTTPS
        location / {
            # Для localhost используем порт 3017, для остальных - стандартный HTTPS порт
            set $redirect_port "";
            if ($host ~* "localhost|127\.0\.0\.1") {
                set $redirect_port ":3017";
            }
            return 301 https://$host$redirect_port$request_uri;
        }
    }

    # HTTPS сервер (основной)
    server {
        listen 443 ssl;
        server_name gigawin.unicorns-group.ru 10.8.0.17 localhost;

        # SSL конфигурация
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Увеличиваем размеры буферов и таймауты
        client_max_body_size 50M;
        proxy_connect_timeout 600;
        proxy_send_timeout 600;
        proxy_read_timeout 600;
        send_timeout 600;

        # Proxy backend API requests
        location /api/ {
            proxy_pass https://backend/;
            proxy_ssl_verify off;
            proxy_redirect off;
            proxy_buffering off;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            # Обработка preflight запросов
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Serve frontend static files
        location / {
            proxy_pass http://frontend/;
            proxy_redirect off;
            proxy_buffering off;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # WebSocket support (если понадобится)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
